<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    template="../WEB-INF/template.xhtml">

    <ui:define name="page_name">Index</ui:define>
    
    <ui:define name="test_goals">
        <p>
            Can I create a custom <code>MyPrincipal</code> object which can return the 
            principal name along with a list of all the roles?.
        </p>
    </ui:define>
    
    <ui:define name="test_results">
        <p>
            <b>Yes!</b>
        </p>
        <p>
           First, you need to deploy the <code>#{applicationController.securityTitle}</code>
           project.  This project has the JASPIC code and generates the <code>MyPrincipal</code>
           custom principal object
        </p>
        <p>
            Second, look at the <b>Principal/Role Information</b> section below :)
        </p>
        <p>
            For this test, I did an override of the <code>MyPrincipal#toString()</code>
            method to returna JSON representation of the username and the list
            of roles.  The advantage of doing it like this is through polymorphism the 
            application does not need to know the <code>MyPrincipal</code> object
            exists or have to include it in the project dependencies for typecasting.
            If a project wants to get a list of the roles, the project can call
            the <code>MyPrincipal#toString()</code> and parse the JSON in any
            way it likes.  This drastically reduces coupling to the 
            security implementation but gets around some of the shortcomings of the
            <code>Principal</code> interface.
        </p>
    </ui:define>
    
    <ui:define name="research_references">
    </ui:define>
    
    
    

</ui:composition>
